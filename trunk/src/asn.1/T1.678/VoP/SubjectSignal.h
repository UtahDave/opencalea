/*
 * This file is autogenerated by the ASN.1 compiler.
 * Copyright (c) 2003-2007 Lev Walkin <vlm@lionet.info>
 * See http://lionet.info/asn1c
 *
 * Source ASN.1 file is Copyright (c) by US CALEA, included
 * with permission (if included). <<< this depends on whether
 * or not you include the original ASN.1 file into OpenCALEA >>>
 *
 * This file is part of OpenCALEA suite (http://opencalea.org)
 * and is subject to OpenCALEA license (see COPYING file in the
 * root of the opencalea distribution).
 *
 * Copyright (c) 2007 Norman Brandinger <norm@goes.com>
 *
 */

/*
 * Generated by asn1c-0.9.22 (http://lionet.info/asn1c)
 * From ASN.1 module "T1S1-LAES-VoP-Abstract-Syntax-Module"
 * 	found in "T1S1-LAES-VoP-Abstract-Syntax-Module.asn"
 * 	`asn1c -fnative-types`
 */

#ifndef	_SubjectSignal_H_
#define	_SubjectSignal_H_


#include <asn_application.h>

/* Including external dependencies */
#include "CaseIdentity.h"
#include "IAPSystemIdentity.h"
#include "TimeStamp.h"
#include <VisibleString.h>
#include "PartyIdentity.h"
#include <constr_CHOICE.h>
#include "H323CallTransfer.h"
#include "SipHeader.h"
#include <asn_SET_OF.h>
#include <constr_SET_OF.h>
#include <constr_SEQUENCE.h>

#ifdef __cplusplus
extern "C" {
#endif

/* Dependencies */
typedef enum SubjectSignal__input_PR {
	SubjectSignal__input_PR_NOTHING,	/* No components present */
	SubjectSignal__input_PR_userInput,
	SubjectSignal__input_PR_translationInput
} SubjectSignal__input_PR;
typedef enum SubjectSignal__input__userInput_PR {
	SubjectSignal__input__userInput_PR_NOTHING,	/* No components present */
	SubjectSignal__input__userInput_PR_generic,
	SubjectSignal__input__userInput_PR_specific
} SubjectSignal__input__userInput_PR;
typedef enum SubjectSignal__input__translationInput_PR {
	SubjectSignal__input__translationInput_PR_NOTHING,	/* No components present */
	SubjectSignal__input__translationInput_PR_generic,
	SubjectSignal__input__translationInput_PR_specific
} SubjectSignal__input__translationInput_PR;
typedef enum SubjectSignal__signal__refer_PR {
	SubjectSignal__signal__refer_PR_NOTHING,	/* No components present */
	SubjectSignal__signal__refer_PR_sip,
	SubjectSignal__signal__refer_PR_h323
} SubjectSignal__signal__refer_PR;

/* Forward declarations */
struct CallIdentity;
struct PartyIdentity;
struct MediaInformation;
struct ProtocolSpecificParameters;
struct EncapsulatedSignalingMessage;

/* SubjectSignal */
typedef struct SubjectSignal {
	CaseIdentity_t	 caseId;
	IAPSystemIdentity_t	*iAPSystemId	/* OPTIONAL */;
	TimeStamp_t	 timestamp;
	struct CallIdentity	*callId	/* OPTIONAL */;
	struct PartyIdentity	*signalingPartyId	/* OPTIONAL */;
	struct PartyIdentity	*signaledPartyId	/* OPTIONAL */;
	struct SubjectSignal__input {
		SubjectSignal__input_PR present;
		union SubjectSignal__input_u {
			struct SubjectSignal__input__userInput {
				SubjectSignal__input__userInput_PR present;
				union SubjectSignal__input__userInput_u {
					VisibleString_t	 generic;
					PartyIdentity_t	 specific;
				} choice;
				
				/* Context for parsing across buffer boundaries */
				asn_struct_ctx_t _asn_ctx;
			} userInput;
			struct SubjectSignal__input__translationInput {
				SubjectSignal__input__translationInput_PR present;
				union SubjectSignal__input__translationInput_u {
					VisibleString_t	 generic;
					PartyIdentity_t	 specific;
				} choice;
				
				/* Context for parsing across buffer boundaries */
				asn_struct_ctx_t _asn_ctx;
			} translationInput;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} input;
	struct MediaInformation	*subjectMedia	/* OPTIONAL */;
	struct SubjectSignal__signal {
		VisibleString_t	*switchhookFlash	/* OPTIONAL */;
		VisibleString_t	*dialedDigits	/* OPTIONAL */;
		VisibleString_t	*featureKey	/* OPTIONAL */;
		VisibleString_t	*otherSignalingInformation	/* OPTIONAL */;
		struct SubjectSignal__signal__refer {
			SubjectSignal__signal__refer_PR present;
			union SubjectSignal__signal__refer_u {
				struct SubjectSignal__signal__refer__sip {
					A_SET_OF(SipHeader_t) list;
					
					/* Context for parsing across buffer boundaries */
					asn_struct_ctx_t _asn_ctx;
				} sip;
				H323CallTransfer_t	 h323;
			} choice;
			
			/* Context for parsing across buffer boundaries */
			asn_struct_ctx_t _asn_ctx;
		} *refer;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} signal;
	struct ProtocolSpecificParameters	*protocolSpecificParameters	/* OPTIONAL */;
	struct SubjectSignal__signalingMsg {
		A_SET_OF(struct EncapsulatedSignalingMessage) list;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} *signalingMsg;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} SubjectSignal_t;

/* Implementation */
extern asn_TYPE_descriptor_t asn_DEF_SubjectSignal;

#ifdef __cplusplus
}
#endif

/* Referred external types */
#include "CallIdentity.h"
#include "PartyIdentity.h"
#include "MediaInformation.h"
#include "ProtocolSpecificParameters.h"
#include "EncapsulatedSignalingMessage.h"

#endif	/* _SubjectSignal_H_ */
